// Default build file for Java projects
// Applies both Java and Application plugin, the latter for easy running through gradle itself.

// [ Standard Plugins ] //
apply plugin: 'java'
apply plugin: 'application'

// [ Coding Standards ] //
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

// [ Dependency Version Checker ] //
apply plugin: 'com.github.ben-manes.versions'

// [ Test Console Reporter ] //
apply plugin: 'com.github.ksoichiro.console.reporter'

// [ License Plugin ] //
apply plugin: "com.github.hierynomus.license"

// Below plugins are for easily creating 'fat jars' and Window's executable files.
// apply plugin: 'edu.sc.seis.launch4j'
// apply plugin: 'com.github.johnrengelman.shadow'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

repositories {
  mavenCentral()
}

dependencies {
  testCompile 'junit:junit:4.12'

  compile 'org.slf4j:slf4j-api:1.7.25'

  compile 'ch.qos.logback:logback-classic:1.2.3'
  compile 'ch.qos.logback:logback-core:1.2.3'

  compile 'io.reactivex.rxjava2:rxjava:2.1.0'
}

jacocoTestReport {
  reports {
    xml.enabled false
    csv.enabled false
    html.destination "${buildDir}/jacoco-report"
  }
}

mainClassName = "net.thenightwolf.Main" // Enter main class here

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

/*
Uncomment if using launch4j and shadow plugin for easy fat jars and Windows executables.
Modify the outfile name based on needs.

shadowJar {
    baseName = 'server'
    classifier = null
    version = null
}

launch4j {
    outfile = "exe_name.exe"
    headerType = "console" //gui, console, etc
    mainClassName = project.mainClassName

    copyConfigurable = project.tasks.shadowJar.outputs.files
    jar = "lib/${project.tasks.shadowJar.archiveName}"
}

*/

license {
  ext.year = '2017'
  ext.name = 'Jordan Knott'
  ext.email = 'jordanaknott@gmail.com'

  mapping {
    java = 'SLASHSTAR_STYLE'
  }
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

buildscript {
    repositories {
        maven {
            url 'https://plugins.gradle.org/m2'
        }
        jcenter()
    }

    dependencies {

      // Version Plugin
      classpath 'com.github.ben-manes:gradle-versions-plugin:0.14.0'

      // Test Console Reporter
      classpath 'com.github.ksoichiro:gradle-console-reporter:0.5.0'

      // License Plugin
      classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0"

      /*
        For building fat jars. TODO - Move to JavaFX Packager plugin
        classpath 'gradle.plugin.edu.sc.seis.gradle:launch4j:1.6.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        */
    }
}
